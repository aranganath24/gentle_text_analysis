[["index.html", "A Gentle Introduction to Text Analysis in R 1 Introduction", " A Gentle Introduction to Text Analysis in R Nickoal Eichmann-Kalwara Aditya Ranganath 2022-07-31 1 Introduction "],["preliminaries-getting-started-with-r-studio.html", "2 Preliminaries: Getting Started with R Studio 2.1 R and R Studio Installation 2.2 The R Studio Interface 2.3 Install Packages 2.4 Load libraries 2.5 Set Working Directory", " 2 Preliminaries: Getting Started with R Studio In this preliminary section, we’ll cover basic information that will help you to get started with R Studio. 2.1 R and R Studio Installation If you haven’t already, please go ahead and install R and R Studio. R and R Studio must be installed separately; you should install R first, and then R Studio. R is the bare-bones computing environment, while R Studio is a visually appealing and user-friendly interface that allows users to interact with this environment in an intuitive way. Once you have both installed, you don’t need to open up R and R Studio separately; you only need to interact with R Studio (which will run R in the background). The following subsections provide instructions on installing R and R Studio for the macOS and Windows operating systems. These instructions are taken from the “Setup” section of the Data Carpentry Course entitled R for Social Scientists. The Data Carpentry page also contains installation instructions for the Linux operating system; if you’re a Linux user, please refer to that page for instructions. The Appendix to Garret Grolemund’s book Hands on Programming with R also provides an [excellent overview of the R and R Studio installation process]( here. 2.1.1 Windows Installation Instructions Download R from the CRAN website Run the .exe file that was just downloaded. Go to the R Studio download page and under Installers select the “Windows” option. Double click the file to install R Studio Open R Studio to make sure it works. 2.1.2 macOS Installation Instructions Download R from the CRAN website Select the .pkg file for the latest R version. Double click on the downloaded file to install R. It is also a good idea to install XQuartz, which some packages require. Go to the R Studio download page, and under Installers select the “macOS” option. Double click the file to install R Studio Open R Studio to make sure it works. 2.2 The R Studio Interface Now that we’ve installed and opened up R Studio, let’s familiarize ourselves with the R Studio interface. When we open up R Studio, we’ll see a window open that looks something like this: Figure 2.1: The R Studio Interface If your interface doesn’t look exactly like this, it shouldn’t be a problem; we would expect to see minor cosmetic differences in the appearance of the interface across operating systems and computers (based on how they’re configured). However, you should see four distinct windows within the larger R Studio interface: The top-left window is known as the Source. The Source window is where we can write our R scripts (including the code associated with this tutorial), and execute those scripts. We can also type in R code into the “Console” window (bottom-left window), but it is preferable to write our code in a script within the source window. That’s because scripts can be saved (while code written into the console cannot); writing scripts therefore allows us to keep track of what we’re doing, and facilitates the reproducibility of our work. Note that in some cases, we may not see a Source window when we first open R Studio. In that case, to start a new script, simply click the File button on the R Studio menu bar, scroll down to New File button, and then select R Script from the menu bar that opens up. It’s also worth noting that the outputs of certain functions will appear in the Source window. In the context of our tutorial, when we want to view our datasets, we will use the View() function, which will display the relevant data within a new tab in the Source window. The top-right window is the Environment/History pane of the R Studio interface. The “Environment” tab of this window provides information on the datasets we’ve loaded into R Studio, as well as objects we have defined (we’ll talk about objects more later in the tutorial). -The “History” tab of the window provides a record of the R commands we’ve run in a given session. The bottom-right window is the Files/Plots/Packages/Help/Viewer window. The “Files” tab displays our computer’s directories and file structures and allows us to navigate through them without having to leave the R environment. The “Plots” tab is the tab where we can view any visualizations (including maps) that we create. Within the “Plots” tab, make note of the “Zoom” button, which we can use to enlarge the display of our maps and visualizations if they’re too compressed in the “Plots” window. Also, note the “Export” button within the “Plots” tab (next to the “Zoom” button); we can use this button to export the displayed map to a .png or .jpeg file that can be used outside of R Studio (we can also export our visualizations programmatically; we’ll cover how to do so later in the tutorial). The “Packages” tab provides information on which packages have been installed, as well as which packages are currently loaded (more on packages in Section 3.4) The “Help” tab displays documentation for R packages and functions. If we want to know more about how a package or function work, we can simply type a “?” followed by the package or function’s name (no space between the question mark and the name) and relevant information will be displayed within the “Help” tab. The “Viewer” tab displays HTML output. If we write code that generates an HTML file, we can view it within the “Viewer” tab. This will be relevant in the context of creating and viewing dynamic maps, which we’ll cover in Section 4.7 of the tutorial. The bottom-left window is the Console/Terminal/Jobs window. The “Console” tab is where we can see our code execute when we run our scripts, as well as certain outputs produced by those scripts. In addition, if there are any error or warning messages, they will be printed to the “Console” tab. We can also type code directly into the console, but as we noted earlier, it is better practice to write our code in a script and then run it from there. The “Terminal”, “R Markdown” and “Jobs” tabs are not relevant for the tutorial. 2.3 Install Packages R is an open-source programming language for statistical computing that allows users to carry out a wide range of data analysis and visualization tasks (among other things). One of the big advantages of using R is that it has a very large user community among social scientists and statisticians, who frequently publish R packages. One might think of packages as workbooks of sorts, which contain a well-integrated set of R functions, scripts, data, and documentation; these “workbooks” are designed to facilitate certain tasks or implement given procedures. These packages are then shared with the broader community, and at this point, anyone who needs to accomplish the tasks to which the package addresses itself can use the package in the context of their own projects. The ability to use published packages considerably simplifies the work of applied social scientists and digital humanists using R; it means that they rarely have to write code entirely from scratch, and can build on the code that others have published in the form of packages. This allows applied researchers to focus on substantive problems, without having to get too bogged down in complicated programming tasks. In the context of this tutorial, extracting even basic information from a text corpus in R would be a relatively complex task if we had to write all our code from scratch. However, because we are able to make use of text mining and visualization packages written by other researchers and programmers, the task is considerably simpler, and will not require any complicated programming. In this workshop, we will use the following packages to carry out some basic text mining and data visualization tasks (please click the relevant link to learn more about a given package; note that the tidyverse is not a single package, but rather an entire suite of packages used for common data science and analysis tasks): tm tidyverse: wordcloud2 quanteda tidytext To install a package in R, we can use the install.packages function. A function is essentially a programming construct that takes a specified input, runs this input (called an “argument”) through a set of procedures, and returns an output. In the code block below, the name of the package we want to install (here, “tm”) is enclosed within quotation marks and placed within parentheses after printing install.packages Running the code below will effectively download the tm package to our computer: # Installs &quot;tm&quot; package install.packages(&quot;tm&quot;) To run this code in your own R session: First, copy the code from the codeblock above (you can copy the code to your clipboard by hovering over the top-right of the code-block and clicking the “copy” icon; you can also highlight the code and copy from the Edit menu of your browser). Then, start a new R script within R Studio; if you want to keep a future record of your work, you may want to save this script to your computer (perhaps in the same folder to which you downloaded the tutorial data). We can save our scripts via the R Studio “File” menu. Paste the code into the script, highlight it, and click the “Run” button that is just above the Source window. Alternatively, instead of copying/pasting, you can manually type in the code from the codeblock into your script (manually typing in the code is slower, but often a better way to learn than copy/pasting). After you’ve run the code, watch the code execute in the console, and look for a message confirming that the package has been successfully installed. Below, we can see how that line of code should look in your script, and how to run it: Figure 2.2: Installing tm package in R Script Please note that you can follow along with the tutorial on your own computers by transferring all of the subsequent codeblocks into your script in just this way. Run each codeblock in your R Studio environment as you go, and you should be able to replicate the entire tutorial on your computer. You can copy-paste the workshop code if you wish, but we recommend actually retyping the code into your script, since this will help you to more effectively familiarize yourself with the process of writing code in R. Note that the codeblocks in the tutorial usually have a comment, prefaced by a hash (“#”). When writing code in R (or any other command-line interface) it is good practice to preface one’s code with brief comments that describe what a block of code is doing. Writing these comments can allow someone else (or your future self) to read and quickly understand the code more easily than otherwise might be the case. The hash before the comment effectively tells R that the subsequent text is a comment, and should be ignored when running a script If one does not preface the comment with a hash, R wouldn’t know to ignore the comment, and would throw an error message. Now, let’s install the other packages we mentioned above, using the same install.packages() function: install.packages(tidyverse) install.packages(wordcloud2) install.packages(quanteda) install.packages(tidytext) All of the packages we need are now installed! 2.4 Load libraries However, while our packages are installed, they are not yet ready to use. Before we can use our packages, we must load them into our environment. We can think of the process of loading installed packages into a current R environment as analogous to opening up an application on your phone or computer after it has been installed (even after an application has been installed, you can’t use it until you open it!). To load (i.e. “open”) an R package, we pass the name of the package we want to load as an argument to the library function. For example, if we want to load the tm package into the current environment, we can type: # Loads tm package into memory library(tm) At this point, the full suite of the tm package’s functionality is available for us to use. Now, let’s go ahead and load the remainder of the packages that we’ll need: # loads remainder of required packages library(tidyverse) library(wordcloud2) library(quanteda) library(tidytext) At this point, the packages are loaded and ready to go! One important thing to note regarding the installation and loading of packages is that we only have to install packages once; after a package is installed, there is no need to subsequently reinstall it. However, we must load the packages we need (using the library function) every time we open a new R session. In other words, if we were to close R Studio at this point and open it up later, we would not need to install these packages again, but would need to load the packages again. 2.5 Set Working Directory Before we can bring our data into R Studio and begin the tutorial, we have to specify that data’s location on our computer. This step is known as setting one’s working directory. Before setting the working directory, make sure that you’ve downloaded the ICPSR dataset, and have placed it in a directory (i.e. folder) on your computer that is specifically dedicated to this tutorial. If you’re unfamiliar with the concept of file paths, the easiest way to set your working directory is through the R Studio menu. To do so, follow these steps: First, Click on the “Session” menu on the R Studio menu bar at the top of your screen, and then scroll down to the “Set Working Directory” button in the menu that opens up. When you hover over the “Set Working Directory” button, a subsidiary menu that contains a button that says “Choose Directory” will open; click this “Choose Directory” button. In the dialog box that opens up, navigate to the directory that contains the ICPSR data, select it, and click “Open”. At this point, your working directory should be set! The graphic below demonstrates the process of setting one’s working directory through R Studio’s menus: Figure 2.3: Setting Working Directory Via Menus Alternatively, if you are familiar with the concept of file paths, and know the file path to the folder containing the downloaded ICPSR dataset, you can set the working directly using the setwd() function, where the argument to the function is the relevant file path enclosed in quotation marks. For example, the following code sets the working directory to the folder containing the advertisements from the El Diario corpus: # Sets working directory setwd(&quot;019.11.14-ElDiarioCorpus/adverts&quot;) Note that you won’t want to copy and paste the above codeblock, since your file path will be different; be sure to replace the file path above with your own. "],["reading-in-a-text-corpus.html", "3 Reading in a Text Corpus", " 3 Reading in a Text Corpus # reads in the filenames for diario advertisements as a character vector, and assigns it to an object named &quot;diario_files&quot; diario_files&lt;-list.files(pattern=&quot;.txt&quot;) # Uses the &quot;Corpus&quot; function from the &quot;tm&quot; package to create a new text corpus based on the diario advertisement text files; this corpus is assigned to a new object named &quot;diario_adverts_corpus&quot; diario_adverts_corpus&lt;-Corpus(URISource(diario_files), readerControl = list(reader=readPlain)) # prints metadata about the corpus assigned to the &quot;diario_adverts_corpus&quot; object diario_adverts_corpus ## &lt;&lt;VCorpus&gt;&gt; ## Metadata: corpus specific: 0, document level (indexed): 0 ## Content: documents: 254 "],["creating-a-tidy-dataframe-from-a-text-corpus.html", "4 Creating a tidy dataframe from a text corpus", " 4 Creating a tidy dataframe from a text corpus # Uses the &quot;tidy&quot; function from the &quot;tidytext&quot; package to transform the &quot;diario_adverts_corpus&quot; corpus into a tidy data frame, where each file&#39;s textual information is stored as a row in the data frame; this data frame is assigned to a new object named &quot;diario_adverts_tidy&quot; diario_adverts_tidy&lt;-tidy(diario_adverts_corpus) # Prints the contents of &quot;diario_adverts_tidy&quot; diario_adverts_tidy "],["creating-a-word-frequency-table.html", "5 Creating a word frequency table", " 5 Creating a word frequency table # extract Spanish stopwords as a data frame, and assign it to an object named &quot;spanish stopwords&quot; spanish_stopwords&lt;-as.data.frame(stopwords(&quot;spanish&quot;)) # Creates word frequency table based on &quot;text&quot; column of &quot;diario_adverts_tidy&quot; object; diario_frequency_table&lt;-diario_adverts_tidy %&gt;% unnest_tokens(output=word, input=text, token=&quot;words&quot;) %&gt;% count(word, sort=TRUE) %&gt;% filter(!word %in% stop_words$word) %&gt;% filter(!word %in% spanish_stopwords$`stopwords(&quot;spanish&quot;)`) diario_frequency_table_numbers&lt;-parse_number(diario_frequency_table$word) diario_frequency_table&lt;-cbind(diario_frequency_table, diario_frequency_table_numbers) diario_frequency_table&lt;-diario_frequency_table %&gt;% filter(is.na(diario_frequency_table_numbers)) diario_frequency_table&lt;-diario_frequency_table %&gt;% select(-diario_frequency_table_numbers) diario_frequency_table "],["visualizing-word-frequency-data.html", "6 Visualizing word frequency data 6.1 Charting word frequencies 6.2 Creating a word cloud", " 6 Visualizing word frequency data 6.1 Charting word frequencies 6.1.1 Extracting dataframe of ten most frequent words diario_top_ten&lt;-diario_frequency_table %&gt;% slice_max(n, n=10) diario_top_ten 6.1.2 Using ggplot2 to make chart of ten most frequent words diario_frequency_graph&lt;- ggplot(diario_top_ten, aes(x=reorder(word, n), y=n))+ geom_bar(stat=&quot;identity&quot;)+ coord_flip()+ xlab(&quot;&quot;)+ ylab(&quot;Frequency&quot;)+ ggtitle(&quot;Ten Most Frequent Words in Diario Advertisements&quot;)+ labs(caption = &quot;Source: El Diario Project&quot;) diario_frequency_graph 6.2 Creating a word cloud # make word cloud wordcloud2(data = df_word_frequencies, minRotation = 0, maxRotation = 0, ellipticity = 0.2) "],["extracting-bigrams.html", "7 Extracting bigrams", " 7 Extracting bigrams diario_adverts_tidy diario_bigram&lt;-diario_adverts_tidy %&gt;% unnest_tokens(bigram, text, token=&quot;ngrams&quot;, n=2) %&gt;% count(bigram, sort=TRUE) ## Warning: Outer names are only allowed for unnamed scalar atomic inputs diario_bigram diario_bigram_separated&lt;-diario_bigram %&gt;% separate(bigram, c(&quot;word1&quot;, &quot;word2&quot;, sep=&quot; &quot;)) diario_bigram_filtered&lt;-diario_bigram_separated %&gt;% filter(!word1 %in% stop_words$word) %&gt;% filter(!word2 %in% stop_words$word) remove numbers diario_bigram_word1numbers&lt;-parse_number(diario_bigram_filtered$word1) diario_bigram_word2numbers&lt;-parse_number(diario_bigram_filtered$word2) diario_bigram_filtered&lt;-cbind(diario_bigram_filtered, diario_bigram_word1numbers, diario_bigram_word2numbers) diario_bigram_filtered&lt;-diario_bigram_filtered %&gt;% filter(is.na(diario_bigram_word1numbers)) %&gt;% filter(is.na(diario_bigram_word2numbers)) diario_bigram_filtered_unite&lt;-diario_bigram_filtered %&gt;% unite(bigram, word1, word2, sep=&quot; &quot;) diario_bigram_filtered_unite diario_bigram_filtered_unite&lt;-diario_bigram_filtered_unite %&gt;% select(-c(diario_bigram_word1numbers, diario_bigram_word2numbers)) diario_bigram_filtered_unite "],["visualizing-bigrams.html", "8 Visualizing bigrams", " 8 Visualizing bigrams diario_bigram_top_ten&lt;-diario_bigram_filtered_unite %&gt;% slice_max(n, n=10) diario_bigram_top_ten bigram_graph&lt;- ggplot(diario_bigram_top_ten, aes(x=reorder(bigram, n), y=n))+ geom_bar(stat=&quot;identity&quot;)+ coord_flip()+ xlab(&quot;&quot;)+ ylab(&quot;Frequency&quot;)+ ggtitle(&quot;Ten Most Frequent Co-Occuring Words in Diario Advertisements&quot;)+ labs(caption = &quot;Source: El Diario Project&quot;) bigram_graph "],["extracting-keywords-in-context.html", "9 Extracting keywords in context", " 9 Extracting keywords in context kwic_token&lt;-tokens(tidy_diario$text) business_keyword_context&lt;-kwic(kwic_token, pattern=&quot;business&quot;, valuetype=&quot;fixed&quot;, window=3) business_keyword_context "],["further-reading.html", "10 Further Reading", " 10 Further Reading https://search.r-project.org/CRAN/refmans/quanteda/html/kwic.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
